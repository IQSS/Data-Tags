'scopeName': 'source.tags'
'name': 'DataTags Grammer'
'fileTypes': ['dg','ts']
#'foldingStartMarker' : '\{\s*$'
#'foldingStopMarker' : '^\s*\}'
'patterns':[
  {'include' : "#line_comment"}
  {'include' : '#Slot'}
  {'include' : '#multiline_comment'}
  {'include' : '#set_node'}
  {'include' : '#call_node'}
  {'include' : '#ask_node'}
  {'include' : '#end_node'}
  {'include' : '#todo_node'}
]
'repository':

  'keyword':
    'name' : 'string.other.tags'
    'match' : '(some of|one of|consists of|TODO|todo)'

  'Slot':
    'name' : 'source.tags.compoundSlot'
    'begin' : '^([A-Za-z0-9_]+)(\\s*\\[.*\\]){0,1}(\\s*)(:)'
    'beginCaptures':
      '1':
        'name' : 'entity.name.tag.tags.slot'
    'end' : '(\\.)'
    'endCaptures':
      '1':
        'name' : 'constant.character.escape.tags'
    'patterns':[
      {'include'  : '#keyword'}
      {'include'  : '#multiline_comment'}
      {'include'  : '#note'}
      {'include'  : '#variable'}
    ]

  'reject_node':
    'name' : 'source.tags.reject_node'
    'begin' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(reject)(\\s*)(:)'
    'beginCaptures':
      '5':
        'name' : 'declaration.section entity.name.section.tags'
      '8':
        'name' : 'string.other.tags'
    'end' : '\\]'
    'contentName' : 'invalid.deprecated.tags'

  'ask_node':
    'name' : 'source.tags.ask_node'
    'begin' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(ask)( *)(:)'
    'beginCaptures':
      '5':
        'name' : 'declaration.section entity.name.section.tags'
      '8':
        'name' : 'string.other.tags'
    'end' : '\\]'
    'patterns':[
      {'include' : '#text_node'}
      {'include' : '#answer_node'}
      {'include' : '#line_comment'}
      {'include' : '#terms_node'}
    ]

  'end_node':
    'name': 'source.tags.node.end'
    'match' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(end)( *)(\\])'
    'captures':
      '5':
        'name' : 'constant.character.escape.tags'
      '8':
        'name': 'invalid.illegal.tags'

  'todo_node':
    'name' : 'source.tags.todo_node'
    'begin' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(todo)( *)(:)'
    'beginCaptures':
      '5':
        'name' : 'declaration.section entity.name.section.tags'
      '8':
        'name' : 'string.other.tags'
    'end' : '\\]'
    'contentName' : 'comment.block.tags'

  'terms_node':
    'name' : 'source.tags.terms_node'
    'begin' : '(\\{)( *)(terms)( *)(:)'
    'beginCaptures':
      '3':
        'name' : 'string.other.tags'
    'end' : '\\}'
    'patterns':[
      {'include' : '#line_comment'}
      {'include' : '#term_node'}
    ]

  'term_node':
    'name' : 'source.tags.node.term'
    'begin' : '(\\{)'
    'end' : '\\}'
    'contentName' : 'markup.quote.tags'
    'patterns':[
      {
        'name' : 'source.tags.term'
        'match' : '([^:]*)(:)'
        'captures' :
          '1':
            'name' : 'string.other.tags'
      }
      {'include' : '#line_comment'}
    ]

  'text_node':
    'name' : 'source.tags.set_node'
    'begin' : '(\\{)( *)(text)( *)(:)'
    'beginCaptures':
      '3':
        'name' : 'string.other.tags'
    'end' : '\\}'
    'contentName' : 'markup.quote.tags'
    'patterns':[
      {'include' : '#line_comment'}
    ]

  'answer_node':
    'name' : 'source.tags.set_node'
    'begin' : '(\\{)( *)(answers)( *)(:)'
    'beginCaptures':
      '3':
        'name' : 'string.other.tags'
    'end' : '\\}'
    'patterns':[
      {'include' : '#sub_node'}
      {'include' : '#line_comment'}
    ]

  'sub_node':
    'name' : 'source.tags.set_node'
    'begin' : '(\\{)([\\w ]*)(:)'
    'beginCaptures':
      '2':
        'name' : 'support.constant.tags'
    'end' : '\\}'
    'patterns':[
      {'include' : '#set_node'}
      {'include' : '#line_comment'}
      {'include' : '#todo_node'}
      {'include' : '#call_node'}
      {'include' : '#end_node'}
      {'include' : '#ask_node'}
      {'include' : '#reject_node'}
    ]

  'set_node':
    'name' : 'source.tags.set_node'
    'begin' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(set)( *)(:)'
    'beginCaptures':
      '5':
        'name' : 'declaration.section entity.name.section.tags'
      '8':
        'name' : 'string.other.tags'
    'end' : '\\]'
    'patterns':[
      {'include' : '#assigment'}
    ]

  'call_node':
    'begin' : '(\\[)(\\s*)((>)(.*)(<)){0,1}(\\s*)(call)( *)(:)'
    'beginCaptures':
      '5':
        'name' : 'constant.character.escape.tags'
      '8':
        'name' : 'string.other.tags'
    'end' : '\\]'
    'contentName' : 'declaration.section entity.name.section.tags'

  'assigment':
    'name' : 'source.tags.assigment'
    'match' : '([a-zA-Z0-9_/]+)(=|\\+=)([a-zA-Z0-9_/]+)'
    'captures':
      '1':
        'name' : 'entity.name.tag.tags'
      '3':
        'name' : 'markup.italic.tags'

  'variable':
    'name' : 'markup.italic.tags.var'
    'match' : '([a-zA-Z0-9_/]+)'

  'note':
    'name': 'source.tags.note'
    'begin': '\\['
    'end': '\\]'

  'multiline_comment':
    'name' : 'comment.block.tags'
    'begin' : '<\\*'
    'end' : '\\*>'

  'call_var':
    'match': '([a-zA-Z0-9_]+)'
    'name' : 'constant.character.escape.tags'

  'line_comment':
    'name' : 'comment.line.tags'
    'match' : '(<--.*)'
